#+Title: Emacs Configuration
#+Author: Peng Mei Yu
#+Email: pengmeiyu@riseup.net
#+Copyright: Copyright 2015-2019 Peng Mei Yu
#+License: GPLv3

#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :eval no-export
#+PROPERTY: header-args+ :comments org
#+PROPERTY: header-args:emacs-lisp :tangle init.el


#+begin_verse
  Join the [[http://www.stallman.org/saint.html][Church of Emacs]].
  Hold the holy ~M-x butterfly~.
  Unleash the powers of the butterfly.
#+end_verse

#+begin_quote
  Emacs saves you time when you work, and takes it back when you play with it.
#+end_quote

* init.el
  Use ~M-x org-babel-tangle~ or ~C-c C-v t~ to manually extract lisp code.

* Personal Information
  name and mail address
  #+begin_src emacs-lisp
    (setq user-full-name "Peng Mei Yu"
          user-mail-address "pengmeiyu@riseup.net")
  #+end_src

  Id
  #+begin_src emacs-lisp
    (setq my-irc-nick "pengmeiyu")
  #+end_src

* Bootstrap
** Enforce minimum Emacs version
   #+begin_src emacs-lisp
     (let ((min-version "26.0.50"))
       (when (version< emacs-version min-version)
         (error "Gnu Emacs %s or newer is required" min-version)))
   #+end_src

   #+begin_src emacs-lisp
     (setq load-prefer-newer t)
   #+end_src

** Emacs server
   Detect existing emacs server and switch to it if possible
   #+begin_src emacs-lisp
     (require 'server)

     (defun my-server-shunt ()
       "Shunts to emacsclient"
       (let ((args (append '("emacsclient" "-a" "\"\"" "-n")
                           (cdr command-line-args))))
         (shell-command (substring (format "%S" args) 1 -1))
         (kill-emacs)))

     ;; Keep only one Emacs server instance
     (if (server-running-p)
         (if (daemonp)
             (error "Another running emacs server detected, abort")
           (my-server-shunt))
       (server-start))
   #+end_src

** Require common lisp
   #+begin_src emacs-lisp
     (require 'cl-lib)
   #+end_src

** XDG specification
   Define XDG directories
   #+begin_src emacs-lisp
     (require 'xdg)

     (defvar user-emacs-config-dir
       (expand-file-name "emacs" (xdg-config-home)))

     (defvar user-emacs-data-dir
       (expand-file-name "emacs" (xdg-data-home)))

     (defvar user-emacs-cache-dir
       (expand-file-name "emacs" (xdg-cache-home)))
   #+end_src

** Package manager
   #+begin_src emacs-lisp
     (require 'package)
     (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")))
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
     (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
     (package-initialize)
   #+end_src

** Bootstrap use-package
   #+begin_src emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (eval-when-compile
       (require 'use-package))
     (require 'bind-key)

     (setq use-package-verbose t)

     ;; Disable lazy loading in daemon mode
     (if (daemonp)
         (setq use-package-always-demand t))
   #+end_src

** custom.el
   Variables configured via the interactive 'customize' interface
   #+begin_src emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (load custom-file 'noerror)
   #+end_src

* Core
  Emacs built-in features

** environment
*** Determine operating system type
    #+begin_src emacs-lisp
      (defconst *os-is-gnu* (eq system-type 'gnu/linux))
      (defconst *os-is-mac* (eq system-type 'darwin))
      (defconst *os-is-windows* (eq system-type 'windows-nt))
    #+end_src

*** Language
    #+begin_src emacs-lisp
      (set-language-environment "UTF-8")
    #+end_src

*** Locale
    set-locale-environment changes the default coding system, so it should be
    called before setting coding system.
    #+begin_src emacs-lisp
      (if *os-is-gnu*
          (set-locale-environment "en_US.UTF-8"))
      (if *os-is-mac*
          (set-locale-environment "en_US.UTF-8"))
      (if *os-is-windows*
          (set-locale-environment "ENU"))
    #+end_src

*** Encoding
    #+begin_src emacs-lisp
      ;;(set-default-coding-systems 'utf-8-unix)
      (prefer-coding-system 'utf-8-unix)
    #+end_src

    Use hexadecimal instead of octal for quoted-insert (C-q).
    #+begin_src emacs-lisp
      (setq read-quoted-char-radix 16)
    #+end_src

*** Font
    #+begin_src emacs-lisp
      (defun my-font-available-p (font)
        "Detect if a font is available"
        (if (find-font (font-spec :family font))
            t
          nil))

      (defun my-set-font (font-list &optional font-size)
        "Set default font to the first available font in FONT-LIST"
        (let ((font (cl-find-if #'my-font-available-p font-list)))

          (if (null font)
              (user-error "No font is available in FONT-LIST"))

          (message "Set default font to %s" font)
          (set-face-font 'default
                         (font-spec :family font :size font-size))))
    #+end_src

    My preferred fonts
    #+begin_src emacs-lisp
      (when (display-graphic-p)
        (my-set-font '("DejaVu Sans Mono" "Consolas" "Monospace")))
    #+end_src

** basic interface
   =*scratch*= buffer's default content
   #+begin_src emacs-lisp
     (setq initial-scratch-message nil)
   #+end_src

   hide all kinds of bars
   #+begin_src emacs-lisp
     (menu-bar-mode -1)
     (if (fboundp 'tool-bar-mode)
         (tool-bar-mode -1))
     (if (fboundp 'scroll-bar-mode)
         (scroll-bar-mode -1))
   #+end_src

   mode line
   #+begin_src emacs-lisp
     (line-number-mode t)
     (column-number-mode t)

     (size-indication-mode t)
   #+end_src

   ring
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src

   buffer name
   #+begin_src emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
     (setq uniquify-separator "/")
     (setq uniquify-after-kill-buffer-p t)
     (setq uniquify-ignore-buffers-re "^\\*")
   #+end_src

   frame name
   #+begin_src emacs-lisp
     ;; show either a file or a buffer name
     (setq frame-title-format
           '("" invocation-name " - "
             (:eval (if (buffer-file-name)
                        (abbreviate-file-name (buffer-file-name))
                      "%b"))))
   #+end_src

** key bindings
   yes-or-no-p
   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src

   bind ~C-x k~ to ~kill-this-buffer~
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x k") 'kill-this-buffer)
   #+end_src

   expand text
   #+begin_src emacs-lisp
     (global-set-key (kbd "M-/") 'hippie-expand)
   #+end_src

   upcase or downcase text
   #+begin_src emacs-lisp
     (global-set-key (kbd "M-u") 'upcase-dwim)
     (global-set-key (kbd "M-l") 'downcase-dwim)
   #+end_src

   shell
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c s") 'eshell)
   #+end_src

** editing
   fill column
   #+begin_src emacs-lisp
     (setq-default fill-column 80)
   #+end_src

   final new line
   #+begin_src emacs-lisp
     (setq require-final-newline t)
   #+end_src

   delete the selection with a key press
   #+begin_src emacs-lisp
     (delete-selection-mode t)
   #+end_src

   smart tab key behavior, indent or complete
   #+begin_src emacs-lisp
     (setq tab-always-indent 'complete)
   #+end_src

   indentation
   #+begin_src emacs-lisp
     ;; don't use tabs to indent
     (setq-default indent-tabs-mode nil)

     (setq-default tab-width 8)
   #+end_src

   Revert buffers automatically when underlying files are changed externally
   #+begin_src emacs-lisp
     (global-auto-revert-mode t)
   #+end_src

   Automatically save buffers to file when losing focus
   #+begin_src emacs-lisp
     (defun my-save-buffers ()
       "Save all file-visiting buffers"
       (save-some-buffers t nil))

     (add-hook 'focus-out-hook 'my-save-buffers)
   #+end_src

   Automatically make a shell script executable on save
   #+begin_src emacs-lisp
     (add-hook 'after-save-hook
               'executable-make-buffer-file-executable-if-script-p)
   #+end_src

** highlight
   #+begin_src emacs-lisp
     (blink-cursor-mode -1)

     ;; highlight the current line
     (global-hl-line-mode 1)

     ;; highlight matching parentheses when the point is on them
     (show-paren-mode t)

     (setq blink-matching-paren nil)
   #+end_src

   whitespace-mode
   #+begin_src emacs-lisp
     (require 'whitespace)
     (setq whitespace-style '(face empty trailing lines-tail indentation))
     (setq whitespace-line-column 80)

     (defun my-whitespace-mode-setup ()
       (whitespace-mode 1)
       (add-hook 'before-save-hook 'whitespace-cleanup nil t))
   #+end_src

** basic major modes
*** text-mode
    #+begin_src emacs-lisp
      (add-hook 'text-mode-hook 'auto-fill-mode)
      (add-hook 'text-mode-hook 'my-whitespace-mode-setup)
    #+end_src

*** prog-mode
    #+begin_src emacs-lisp
      (add-hook 'prog-mode-hook 'abbrev-mode)
      (add-hook 'prog-mode-hook 'my-whitespace-mode-setup)

      (defun my-prog-mode-setup ()
        (which-function-mode 1)

        (setq-local comment-auto-fill-only-comments t)
        (auto-fill-mode 1)

        ;; highlight a bunch of well known comment annotations
        (font-lock-add-keywords
         nil
         '(("\\<\\(\\(FIX\\(ME\\)?\\|TODO\\|OPTIMIZE\\|HACK\\|REFACTOR\\):\\)"
            1 font-lock-warning-face t))))

      (add-hook 'prog-mode-hook 'my-prog-mode-setup)
    #+end_src

** tramp
   #+begin_src emacs-lisp
     (require 'tramp)
     (setq tramp-default-method "ssh")
   #+end_src

** dired
   #+begin_src emacs-lisp
     (setq dired-recursive-copies 'always)
     (setq dired-recursive-deletes 'always)

     (require 'dired-x)
     (setq dired-clean-confirm-killing-deleted-buffers nil)
   #+end_src

** bookmark
   #+begin_src emacs-lisp
     (require 'bookmark)
     (setq bookmark-save-flag 1)
   #+end_src

** internet
   Donâ€™t send anything in HTTP header field
   #+begin_src emacs-lisp
     (setq url-privacy-level 'paranoid)
   #+end_src

*** Proxy
    SOCKS 5 proxy
    #+begin_src emacs-lisp :tangle no
      (setq url-gateway-method 'socks)
      (setq socks-server '("Default server" "localhost" 1080 5))
    #+end_src

    HTTP proxy
    #+begin_src emacs-lisp :tangle no
      (setq url-proxy-services
            '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
              ("http" . "localhost:1081")
              ("https" . "localhost:1081")))
    #+end_src

*** Browser
    eww
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c w") 'eww)
      (global-set-key (kbd "C-c b") 'eww-list-bookmarks)
    #+end_src

*** Email
    message mode
    #+begin_src emacs-lisp
      ;; Turn on PGP
      (add-hook 'message-mode-hook 'epa-mail-mode)
      (add-hook 'message-send-hook 'message-sign-encrypt-if-all-keys-available)

      ;; Message signature
      (setq message-signature-directory
            (expand-file-name "signature" (xdg-config-home)))
      (setq message-signature-file "personal")

      ;; Don't keep message buffer after sending a message.
      (setq message-kill-buffer-on-exit t)
    #+end_src

    SMTP
    #+begin_src emacs-lisp :tangle no
      (setq message-send-mail-function 'message-smtpmail-send-it)

      (setq smtpmail-smtp-server "smtp.mailgun.com"
            smtpmail-stream-type 'ssl  ;; StartTLS is evil.
            smtpmail-smtp-service 465)
    #+end_src

    sendmail
    #+begin_src emacs-lisp
      (setq message-send-mail-function 'message-send-mail-with-sendmail)

      ;; Use the "From:" address in mail header as envelope-from address.
      (setq mail-specify-envelope-from t
            mail-envelope-from 'header)
      (setq message-sendmail-envelope-from 'header)
    #+end_src

    msmtp
    #+begin_src emacs-lisp :tangle no
      (setq sendmail-program "msmtp")
    #+end_src

** security
*** GPG
    Query passphrase through the minibuffer, instead of the pinentry program
    #+begin_src emacs-lisp :tangle no
      (setq epg-pinentry-mode 'loopback)
    #+end_src

*** auth-source
    #+begin_src emacs-lisp
      (setq auth-sources
            (list (expand-file-name "auth/netrc.gpg" (xdg-data-home))))
    #+end_src

    Get secret from auth-source
    #+begin_src emacs-lisp
      (cl-defun my-get-secret (&rest spec &key domain port user &allow-other-keys)
        (let ((record (nth 0 (auth-source-search :max 1
                                                 :host domain
                                                 :port port
                                                 :user user
                                                 :require '(:secret)))))
          (if record
              (let ((secret (plist-get record :secret)))
                (if (functionp secret)
                    (funcall secret)
                  secret))
            nil)))
    #+end_src

** session
*** desktop
    #+begin_src emacs-lisp
      (setq desktop-auto-save-timeout 600)
      (desktop-save-mode t)
    #+end_src

*** recent files
    #+begin_src emacs-lisp
      (require 'recentf)
      (setq recentf-auto-cleanup 'never)
      (setq recentf-exclude
            (mapcar 'expand-file-name
                    (list "/gnu" "/tmp" "/ssh:" "~/.cache" package-user-dir)))
      (recentf-mode 1)
    #+end_src

*** minibuffer history
    #+begin_src emacs-lisp
      (savehist-mode 1)
    #+end_src

*** auto-save
    #+begin_src emacs-lisp
      (setq auto-save-list-file-prefix
            (expand-file-name "auto-save-list/" user-emacs-cache-dir))
    #+end_src

*** backup
    #+begin_src emacs-lisp
      (let ((backup-dir (expand-file-name "backup" user-emacs-cache-dir)))
        (setq-default backup-directory-alist `((".*" . ,backup-dir))))
    #+end_src

* Theme
** theme
   #+begin_src emacs-lisp
     (use-package zenburn-theme
       :ensure t
       :config
       (load-theme 'zenburn))
   #+end_src

** transparency
   alpha '(<active> . <inactive>)
   #+begin_src emacs-lisp :tangle no
     (set-frame-parameter (selected-frame) 'alpha '(95 . 60))
   #+end_src

   #+begin_src emacs-lisp
     (add-to-list 'default-frame-alist '(alpha . (98 . 80)))
   #+end_src

** mode line
   #+begin_src emacs-lisp
     (use-package diminish
       :ensure t
       :config
       (diminish 'abbrev-mode)
       (diminish 'auto-fill-function)
       (diminish 'auto-revert-mode)
       (diminish 'eldoc-mode)
       (diminish 'whitespace-mode))
   #+end_src

** cursor
   highlight the cursor whenever the window scrolls
   #+begin_src emacs-lisp
     (use-package beacon
       :ensure t
       :diminish beacon-mode
       :config
       (beacon-mode t))
   #+end_src

* Utilities
** helm
   #+begin_src emacs-lisp
     (use-package helm
       :ensure t
       :defer 3
       :diminish helm-mode
       :bind-keymap ("C-c h" . helm-command-map)
       :bind (("C-c f" . helm-recentf)
              ("C-h a" . helm-apropos)
              ("C-x b" . helm-mini)
              ("C-x C-b" . helm-buffers-list)
              ("C-x C-d" . helm-browse-project)
              ("C-x C-f" . helm-find-files)
              ("M-x" . helm-M-x)
              ("M-y" . helm-show-kill-ring)
              ("M-s o" . helm-occur)
              :map helm-command-map
              ("M-g g" . helm-do-grep-rg))
       :init
       (defalias 'helm-do-grep-rg 'helm-do-grep-ag)
       :config
       (require 'helm-config)
       (helm-mode 1)

       (setq helm-move-to-line-cycle-in-source t)

       ;; fuzzy matching
       (setq helm-mode-fuzzy-match t)
       (setq helm-completion-in-region-fuzzy-match t)
       (setq helm-M-x-fuzzy-match t
             helm-buffers-fuzzy-matching t
             helm-recentf-fuzzy-match t)

       (add-to-list 'helm-mini-default-sources 'helm-source-bookmarks 'append)

       (setq helm-ff-file-name-history-use-recentf t)
       (setq helm-ff-skip-boring-files t)

       ;; ripgrep
       (setq helm-grep-ag-command "rg --color=always --colors 'match:fg:black' --colors 'match:bg:yellow' --smart-case --no-heading --line-number %s %s %s")
       (setq helm-grep-ag-pipe-cmd-switches '("--colors 'match:fg:black'" "--colors 'match:bg:yellow'")))
   #+end_src

   helm-rg
   #+begin_src emacs-lisp
     (use-package helm-rg
       :ensure t
       :after helm
       :bind (:map helm-command-map
                   ("g" . helm-rg)))
   #+end_src

   helm-ls-git
   #+begin_src emacs-lisp
     (use-package helm-ls-git
       :ensure t
       :after helm)
   #+end_src

** projectile
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t
       :defer 10
       :diminish projectile-mode
       :bind-keymap (("C-c p" . projectile-command-map)
                     ("s-p" . projectile-command-map))
       :config
       (projectile-mode 1)
       (setq projectile-project-search-path '("~/Projects")))

     (use-package helm-projectile
       :ensure t
       :after (helm projectile)
       :config
       (helm-projectile-on))
   #+end_src

** file explorer
   #+begin_src emacs-lisp
     (use-package dired-sidebar
       :ensure t
       :commands (dired-sidebar-toggle-sidebar))
   #+end_src

** crux
   #+begin_src emacs-lisp
     (use-package crux
       :ensure t
       :bind (("C-a" . crux-move-beginning-of-line)
              ("C-c d" . crux-duplicate-current-line-or-region)
              ("C-c D" . crux-delete-file-and-buffer)
              ("C-c e" . crux-eval-and-replace)
              ("C-c I" . crux-find-user-init-file)
              ("C-c o o" . crux-open-with)
              ("C-c o r" . crux-sudo-edit)
              ("C-c r n" . crux-rename-file-and-buffer)
              ("C-c TAB" . crux-indent-defun)
              ("C-x K" . crux-kill-other-buffers)
              ("C-^" . crux-top-join-line)
              ("C-<BACKSPACE>" . crux-kill-line-backwards)
              ("C-S-<BACKSPACE>" . crux-kill-whole-line)))
   #+end_src

** key map
*** which-key
    #+begin_src emacs-lisp
      (use-package which-key
        :ensure t
        :defer 10
        :diminish which-key-mode
        :config
        (which-key-mode 1))
    #+end_src

*** discover-my-major
    #+begin_src emacs-lisp
      (use-package discover-my-major
        :ensure t
        :commands (discover-my-major discover-my-mode)
        :bind ("C-h m" . discover-my-major))
    #+end_src

** undo-tree
   #+begin_src emacs-lisp
     (use-package undo-tree
       :ensure t
       :diminish undo-tree-mode
       :bind ("C-x u" . undo-tree-visualize)
       :config
       (global-undo-tree-mode t))
   #+end_src

** move cursor
*** avy
    jump to visible text using a char-based decision tree
    #+begin_src emacs-lisp
      (use-package avy
        :ensure t
        :bind (("C-c j" . avy-goto-char-timer)
               ("M-g g" . avy-goto-line))
        :config
        (setq avy-background t))
    #+end_src

*** ace-window
    select a window
    #+begin_src emacs-lisp
      (use-package ace-window
        :ensure t
        :bind ("C-x o" . ace-window)
        :config
        (setq aw-scope 'frame))
    #+end_src

** multiple cursors
   #+begin_src emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :bind (("C-|" . mc/edit-lines)
              ("C->" . mc/mark-next-like-this)
              ("C-<" . mc/mark-previous-like-this)
              ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
   #+end_src

** search
   anzu-mode enhances isearch & query-replace by showing total matches and
   current match position in the mode-line
   #+begin_src emacs-lisp
     (use-package anzu
       :ensure t
       :diminish anzu-mode
       :bind (("M-%" . anzu-query-replace)
              ("C-M-%" . anzu-query-replace-regexp))
       :config
       (global-anzu-mode t))
   #+end_src

** alert
   #+begin_src emacs-lisp
     (use-package alert
       :ensure nil
       :config
       (setq alert-default-style 'libnotify))
   #+end_src

** version control
*** Git
    magit
    #+begin_src emacs-lisp
      (use-package magit
        :ensure t
        :mode ("/\\(\
      \\(\\(COMMIT\\|NOTES\\|PULLREQ\\|TAG\\)_EDIT\\|MERGE_\\|\\)MSG\
      \\|\\(BRANCH\\|EDIT\\)_DESCRIPTION\\)\\'" . git-commit-mode)
        :bind ("C-x g" . magit-status))
    #+end_src

    git modes
    #+begin_src emacs-lisp
      (use-package gitconfig-mode
        :ensure t
        :mode ("/\\.gitconfig\\'" "/\\.git/config\\'" "/git/config\\'"
               "/\\.gitmodules\\'"))

      (use-package gitignore-mode
        :ensure t
        :mode ("/\\.gitignore\\'" "/\\.git/info/exclude\\'" "/git/ignore\\'"))
    #+end_src

*** diff-hl
    #+begin_src emacs-lisp
      (use-package diff-hl
        :ensure t
        :defer 10
        :config
        (global-diff-hl-mode t)
        (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
        (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
    #+end_src

** completion
   #+begin_src emacs-lisp
     (use-package company
       :ensure t
       :defer 10
       :diminish company-mode
       :config
       (global-company-mode 1))
   #+end_src

** spell checking
   flyspell
   #+begin_src emacs-lisp
     (use-package flyspell
       :ensure t
       :defer 10
       :diminish flyspell-mode
       :preface
       (defvar my-enable-flyspell nil)
       (cond
        ((executable-find "aspell")
         (setq ispell-program-name "aspell")
         (setq my-enable-flyspell t))
        ((executable-find "hunspell")
         (setq ispell-program-name "hunspell")
         (setq ispell-dictionary "en_US")
         (setq my-enable-flyspell t))
        (t
         (message "Neither aspell nor hunspell found")))
       :if my-enable-flyspell
       :hook ((text-mode . flyspell-mode)
              (prog-mode . flyspell-prog-mode)))
   #+end_src

* Programming
** parenthesis
   smart parens
   #+begin_src emacs-lisp
     (use-package smartparens
       :ensure t
       :defer 10
       :diminish smartparens-mode
       :hook (prog-mode . smartparens-strict-mode)
       :config
       (require 'smartparens-config)
       (show-smartparens-global-mode 1))
   #+end_src

   colorful parens
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src

** flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :diminish flycheck-mode
       :hook (prog-mode . flycheck-mode)
       :config
       (setq flycheck-display-errors-function
             'flycheck-display-error-messages-unless-error-list))
   #+end_src

** language server protocol
   lsp-mode
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :ensure t
       :commands (lsp lsp-mode))
   #+end_src

   lsp-ui
   #+begin_src emacs-lisp
     (use-package lsp-ui
       :ensure t
       :after (lsp-mode)
       :commands (lsp-ui-mode))
   #+end_src

   company-lsp
   #+begin_src emacs-lisp
     (use-package company-lsp
       :ensure t
       :after (company lsp-mode)
       :commands (company-lsp))
   #+end_src

   debug
   #+begin_src emacs-lisp
     (use-package dap-mode
       :ensure t
       :after (lsp-mode)
       :commands (dap-mode dap-ui-mode))
   #+end_src

** yasnippet
   #+begin_src emacs-lisp
     (use-package yasnippet
       :ensure t
       :diminish yas-minor-mode
       :config
       (add-to-list 'yas-snippet-dirs "~/Projects/guix/etc/snippets")
       (yas-global-mode 1))
   #+end_src

** Lisp
   indentation
   #+begin_src emacs-lisp
     (use-package aggressive-indent
       :ensure t
       :diminish aggressive-indent-mode
       :hook ((emacs-lisp-mode scheme-mode) . aggressive-indent-mode))
   #+end_src

** Scheme
   geiser
   #+begin_src emacs-lisp
     (use-package geiser
       :ensure t
       :hook (scheme-mode . geiser-mode--maybe-activate)
       :config
       (setq geiser-active-implementations '(guile))
       (setq geiser-mode-start-repl-p t)
       (setq geiser-repl-history-filename
             (expand-file-name "geiser_history" user-emacs-directory)))
   #+end_src

   guix
   #+begin_src emacs-lisp
     (use-package guix
       :ensure t
       ;; :hook (scheme-mode . guix-devel-mode)
       )
   #+end_src

** Python
   Prefer Python 3
   #+begin_src emacs-lisp
     (setq python-shell-interpreter "python3")
   #+end_src

   python mode
   #+begin_src emacs-lisp
     (defun my-python-mode-setup ()
       (add-hook 'post-self-insert-hook
                 'electric-layout-post-self-insert-function
                 nil t))

     (add-hook 'python-mode-hook 'my-python-mode-setup)
   #+end_src

   anaconda-mode
   #+begin_src emacs-lisp :tangle no
     (use-package anaconda-mode
       :ensure t
       :hook ((python-mode . anaconda-mode)
              (python-mode . anaconda-eldoc-mode)))

     (use-package company-anaconda
       :ensure t
       :after (company anaconda-mode)
       :config
       (push 'company-anaconda company-backends))
   #+end_src

   Language Server Protocol
   #+begin_src emacs-lisp
     (add-hook 'python-mode-hook 'lsp)
   #+end_src

   Install python language server
   #+begin_src sh
     pip3 install python-language-server[all]
   #+end_src

** Go
   #+begin_src emacs-lisp
     (use-package go-mode
       :ensure t
       :mode ("\\.go\\'" . go-mode))

     (use-package go-eldoc
       :ensure t
       :after (go-mode)
       :hook (go-mode . go-eldoc-setup))
   #+end_src

   #+begin_src emacs-lisp
     (defun my-go-mode-setup ()
       (add-hook 'before-save-hook 'gofmt-before-save nil t))

     (add-hook 'go-mode-hook 'my-go-mode-setup)
   #+end_src

   Language Server Protocol
   #+begin_src emacs-lisp
     (add-hook 'go-mode-hook 'lsp)
   #+end_src

   Install go language server
   #+begin_src sh
     go get -u golang.org/x/tools/cmd/gopls
   #+end_src

** C
   #+begin_src emacs-lisp
     (setq c-default-style "linux")
     (setq-default c-basic-offset 4)
   #+end_src

   Language Server Protocol
   #+begin_src emacs-lisp
     (add-hook 'c-mode-hook 'lsp)
     (add-hook 'c++-mode-hook 'lsp)
   #+end_src

   Install C language server
   #+begin_src sh
     # Install clangd.
   #+end_src

   clang-format
   #+begin_src emacs-lisp
     (use-package clang-format
       :ensure t
       :commands (clang-format-buffer))

     (defun clang-format-buffer-smart ()
       "Reformat buffer if .clang-format exists in the projectile root"
       (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
         (clang-format-buffer)))

     (defun my-c-mode-setup ()
       (add-hook 'before-save-hook 'clang-format-buffer-smart nil t))

     (add-hook 'c-mode-hook 'my-c-mode-setup)
     (add-hook 'c++-mode-hook 'my-c-mode-setup)
   #+end_src

** Java
   Language Server Protocol
   #+begin_src emacs-lisp
     (use-package lsp-java
       :ensure nil
       :after lsp
       :hook (java-mode . lsp))
   #+end_src

** JavaScript
   Install JavaScript language server
   #+begin_src sh
     npm i -g typescript-language-server
     npm i -g typescript
   #+end_src

** C#
   csharp-mode
   #+begin_src emacs-lisp
     (use-package csharp-mode
       :ensure nil
       :mode ("\\.cs\\'" . csharp-mode)
       :config
       (defun my-csharp-mode-setup ()
         (c-set-style "c#"))

       (add-hook 'csharp-mode-hook 'my-csharp-mode-setup))
   #+end_src

   OmniSharp
   #+begin_src emacs-lisp
     (use-package omnisharp
       :ensure nil
       :hook (csharp-mode . omnisharp-mode))
   #+end_src

   Install OmniSharp server: ~M-x omnisharp-install-server~

** fish shell
   #+begin_src emacs-lisp
     (use-package fish-mode
       :ensure t
       :mode ("\\.fish\\'" . fish-mode)
       :interpreter ("fish"))
   #+end_src

* Markup Languages
** Org Mode
*** org
    #+begin_src emacs-lisp
      (use-package org
        :ensure org-plus-contrib
        :defer 10
        :mode ("\\.org\\'" . org-mode)
        :bind (("C-c a" . org-agenda)
               ("C-c c" . org-capture)
               ("C-c l" . org-store-link)
               ("C-c C-," . org-insert-structure-template))
        :config
        (setq org-directory "~/Sync/Org")
        (setq org-agenda-files (list org-directory))
        (setq org-default-notes-file
              (expand-file-name "Organizer.org" org-directory))
        (setq my-org-inbox-file (expand-file-name "Inbox.org" org-directory))

        (setq org-catch-invisible-edits 'show)
        (setq org-id-track-globally nil)      ; Do not store org IDs on disk.
        (setq org-use-sub-superscripts '{})

        ;;; org-agenda
        (setq org-agenda-default-appointment-duration 60)
        (setq org-agenda-compact-blocks t)
        (setq org-agenda-span 'month)
        (setq org-agenda-start-on-weekday nil)

        ;;; org-todo
        (setq org-log-done 'time)
        (setq org-log-into-drawer t)
        (setq org-todo-keywords
              '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")))
        (setq org-todo-repeat-to-state "NEXT")
        (setq org-todo-keyword-faces '(("NEXT" :inherit warning)))

        ;;; org-tag
        (setq org-fast-tag-selection-single-key 'expert)
        (setq org-tags-column -80)            ; Align right edge to 80th column.

        ;;; org-capture
        (setq org-capture-templates
              `(("i" "inbox"
                 entry (file my-org-inbox-file)
                 "* %?\n")
                ("j" "journal"
                 entry (file+olp org-default-notes-file "Journal")
                 "* %u\n%?\n")
                ("t" "todo"
                 entry (file+olp org-default-notes-file "Agenda")
                 "* TODO %?\n  :PROPERTIES:\n  :Captured_at: %U\n  :END:\n")))

        (add-to-list 'org-structure-template-alist
                     '("semacs" . "src emacs-lisp") t)
        (add-to-list 'org-structure-template-alist
                     '("sscheme" . "src scheme") t)
        (add-to-list 'org-structure-template-alist
                     '("sshell" . "src sh") t)

        ;;; org-clock
        ;; Persist the running clock and all clock history
        (org-clock-persistence-insinuate)
        (setq org-clock-persist t)
        (setq org-clock-in-resume t)
        ;; Save clock data and notes in drawer
        (setq org-clock-into-drawer t)
        ;; Remove the clock line when result time is zero
        (setq org-clock-out-remove-zero-time-clocks t)

        ;;; org-babel
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((dot . t)
           (latex . t)
           (ledger . t)
           (python . t)
           (scheme . t)
           (shell . t)
           (sql . t)))

        ;; Prefer Python 3
        (setq org-babel-python-command "python3")

        ;; Disable emacs-lisp-checker for org-src-mode
        (add-hook 'org-src-mode-hook
                  (lambda ()
                    (setq-local flycheck-disabled-checkers
                                '(emacs-lisp-checkdoc))))

        ;;; org-export
        (setq org-export-exclude-tags '("noexport" "private"))
        (setq org-export-with-section-numbers nil)
        (setq org-export-with-sub-superscripts '{})
        (setq org-export-with-toc nil)

        ;;; org-html
        (setq org-html-doctype "html5")
        (setq org-html-html5-fancy-p t)
        (setq org-html-validation-link nil)

        ;;; org-latex
        (add-to-list 'org-latex-packages-alist '("" "color"))
        (add-to-list 'org-latex-packages-alist '("" "listings"))
        (setq org-latex-listings t
              org-latex-listings-options '(("basicstyle" "\\small")
                                           ("frame" "single")))

        ;;; org-icalendar
        (setq org-icalendar-alarm-time 60)    ; 60 minutes before the event.
        (setq org-icalendar-combined-agenda-file
              (expand-file-name "agenda.ics" org-directory))
        (setq org-icalendar-exclude-tags
              (append org-export-exclude-tags '("archive" "journal")))
        ;; Include tasks that are not in DONE state.
        (setq org-icalendar-include-todo t)
        ;; Include scheduled and deadline events.
        (setq org-icalendar-use-scheduled
              '(event-if-todo event-if-not-todo todo-start))
        (setq org-icalendar-use-deadline
              '(event-if-todo event-if-not-todo todo-due))
        ;; Whether to make events from plain time stamps.
        (setq org-icalendar-with-timestamps 'active))
    #+end_src

*** org-alert
    Notifications for org agenda items
    #+begin_src emacs-lisp
      (use-package org-alert
        :ensure t
        :defer 20
        :config
        (setq org-alert-interval 600)
        (org-alert-enable))
    #+end_src

*** ox-hugo
    #+begin_src emacs-lisp
      (use-package ox-hugo
        :ensure t
        :after ox)
    #+end_src

*** Add UUID to all org headlines
    #+begin_src emacs-lisp
      (defun my-add-uuid-to-org-headlines-in-buffer ()
        "Add ID properties to all headlines in the current buffer."
        (interactive)
        (org-map-entries 'org-id-get-create))
    #+end_src

** HTML
   htmlize -- Convert buffer text and decorations to HTML
   #+begin_src emacs-lisp
     (use-package htmlize
       :ensure t
       :defer 10)
   #+end_src

   rainbow mode
   #+begin_src emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :hook ((html-mode css-mode) . rainbow-mode))
   #+end_src

   Install HTML language server
   #+begin_src sh
     npm install -g vscode-html-languageserver-bin
   #+end_src

   Install CSS language server
   #+begin_src sh
     npm install -g vscode-css-languageserver-bin
   #+end_src

** YAML
   #+begin_src emacs-lisp
     (use-package yaml-mode
       :ensure t
       :mode ("\\.yaml\\'" "\\.yml\\'"))
   #+end_src

** CSV
   #+begin_src emacs-lisp
     (use-package csv-mode
       :ensure t
       :mode ("\\.csv\\'" . csv-mode))
   #+end_src

** Ledger
   #+begin_src emacs-lisp
     (use-package ledger-mode
       :ensure nil
       :mode ("\\.ledger\\'" . ledger-mode)
       :config
       (use-package flycheck-ledger
         :ensure t))
   #+end_src

** TeX
   auctex
   #+begin_src emacs-lisp
     (use-package auctex
       :ensure nil
       :mode ("\\.tex\\'" . latex-mode)
       :config
       (setq TeX-auto-save t
             TeX-parse-self t
             TeX-PDF-mode t)
       (setq-default TeX-master nil)

       (defun my-latex-mode-setup ()
         (LaTeX-preview-setup)
         (LaTeX-math-mode))

       (add-hook 'latex-mode-hook 'my-latex-mode-setup)

       (use-package company-auctex
         :ensure t
         :after (company auctex)
         :hook (latex-mode . company-auctex-init))

       (use-package reftex
         :ensure t
         :hook (latex-mode . turn-on-reftex)
         :config
         (setq reftex-plug-into-AUCTeX t))
       )
   #+end_src

** Markdown
   #+begin_src emacs-lisp
     (use-package markdown-mode
       :ensure nil
       :mode (("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode)
              ("README\\.md\\'" . gfm-mode)))
   #+end_src

** ob-http
   #+begin_src emacs-lisp
     (use-package ob-http
       :ensure t
       :after (ob)
       :mode ("\\.http\\'" . org-mode))
   #+end_src

** po-mode
   po-mode is provided by gettext.
   #+begin_src emacs-lisp
     (use-package po-mode
       :ensure nil
       :mode ("\\.pot?\\'" . po-mode)
       :config
       ;; Do not wrap lines when editing msgstr
       (add-hook 'po-subedit-mode-hook
                 (lambda ()
                   (setq fill-column 1000)))

       ;; https://www.emacswiki.org/emacs/PoMode
       (defun po-wrap ()
         "Filter current po-mode buffer through `msgcat' tool to wrap all lines."
         (interactive)
         (if (eq major-mode 'po-mode)
             (let ((tmp-file (make-temp-file "po-wrap."))
                   (tmp-buf (generate-new-buffer "*temp*")))
               (unwind-protect
                   (progn
                     (write-region (point-min) (point-max) tmp-file nil 1)
                     (if (zerop
                          (call-process
                           "msgcat" nil tmp-buf t (shell-quote-argument tmp-file)))
                         (let ((saved (point))
                               (inhibit-read-only t))
                           (delete-region (point-min) (point-max))
                           (insert-buffer tmp-buf)
                           (goto-char (min saved (point-max))))
                       (with-current-buffer tmp-buf
                         (error (buffer-string)))))
                 (kill-buffer tmp-buf)
                 (delete-file tmp-file))))))
   #+end_src

* Internet
** Gnus
   #+begin_src emacs-lisp
     (use-package gnus
       :commands (gnus)
       :config
       ;; Email servers
       (setq my--gnus-local '(nnmaildir "local"
                                        (directory "~/Mail")
                                        (get-new-mail nil)))
       ;; Usenet servers
       (setq my--gnus-gmane
             '(nntp "gmane"
                    (nntp-address "news.gmane.org")
                    (nntp-port-number 563)
                    (nntp-open-connection-function nntp-open-tls-stream))
             my--gnus-aioe
             '(nntp "aioe"
                    (nntp-address "nntp.aioe.org")
                    (nntp-port-number 563)
                    (nntp-open-connection-function nntp-open-tls-stream)))

       (setq gnus-select-method my--gnus-local)
       ;; (setq gnus-secondary-select-methods
       ;;       (list my--gnus-gmane my--gnus-aioe))
       )
   #+end_src

** mu4e
   #+begin_src emacs-lisp
     (setq mail-user-agent 'mu4e-user-agent)

     (use-package mu4e
       :ensure nil
       :bind (("C-c m" . mu4e))
       :config

       (setq mu4e-confirm-quit nil)

       ;; Don't save message to the "sent" folder if IMAP takes care of this.
       ;; (setq mu4e-sent-messages-behavior 'delete)

       ;; Fetch email.
       (setq mu4e-get-mail-command "offlineimap")

       ;; Default context.
       (setq mu4e-maildir "~/Mail")
       (setq mu4e-drafts-folder "/drafts")
       (setq mu4e-refile-folder "/archive")
       (setq mu4e-sent-folder   "/sent")
       (setq mu4e-trash-folder  "/trash")

       (setq mu4e-maildir-shortcuts
             '(("/archive" . ?a)
               ("/drafts"  . ?d)
               ("/INBOX"   . ?i)
               ("/sent"    . ?s)
               ("/spam"    . ?j)
               ("/trash"   . ?t)))

       (add-to-list 'mu4e-headers-actions
                    '("git apply mbox" . mu4e-action-git-apply-mbox) t)

       (add-to-list 'mu4e-view-actions
                    '("git apply mbox" . mu4e-action-git-apply-mbox) t))
   #+end_src

** IRC
   ERC
   #+begin_src emacs-lisp
     (use-package erc
       :commands (erc my-erc-start-or-switch)
       :config
       (setq erc-nick my-irc-nick)
       (setq erc-autojoin-channels-alist
             '((".*\\.freenode.net" "#emacs")))
       (erc-autojoin-mode t)

       ;; spell checking
       (erc-spelling-mode 1)

       ;; logging
       (setq erc-log-channels-directory
             (expand-file-name "erc" (xdg-data-home)))

       (setq erc-save-buffer-on-part t)

       ;; fallback to auth-source
       (setq erc-prompt-for-password nil)

       ;; Kill buffers for channels after /part
       (setq erc-kill-buffer-on-part t)
       ;; Kill buffers for private queries after quitting the server
       (setq erc-kill-queries-on-quit t)
       ;; Kill buffers for server messages after quitting the server
       (setq erc-kill-server-buffer-on-quit t)

       ;; open query buffers in the current window
       (setq erc-query-display 'buffer)

       (setq erc-auto-reconnect nil)

       (erc-track-mode t)
       (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                       "324" "329" "332" "333" "353" "477"))

       (defun my-erc-start-or-switch ()
         "Connect to ERC, or switch to last active buffer"
         (interactive)
         (if (get-buffer "irc.freenode.net:6697")
             (erc-track-switch-buffer 1)
           (when (y-or-n-p "Start ERC? ")
             (erc-tls :server "irc.freenode.net" :port 6697
                      :nick my-irc-nick)))))
   #+end_src

** RSS feed
   elfeed
   #+begin_src emacs-lisp
     (use-package elfeed
       :ensure t
       :bind (("C-c n" . my-elfeed-open)
              :map elfeed-search-mode-map
              ("q" . my-elfeed-quit))
       :config
       (setq elfeed-db-directory
             (expand-file-name "elfeed" (xdg-data-home)))

       (use-package elfeed-org
         :ensure t
         :after (elfeed)
         :config
         (elfeed-org))

       (defun my-elfeed-open ()
         (interactive)
         (elfeed-db-load)
         (elfeed))

       (defun my-elfeed-quit ()
         (interactive)
         (elfeed-search-quit-window)
         (elfeed-db-unload)))
   #+end_src

** lookup Wikipedia
   #+begin_src emacs-lisp
     (require 'browse-url)

     (defun my-lookup-wikipedia ()
       "Look up the word under cursor in Wikipedia.
     If there is a text selection, use that."
       (interactive)
       (let (word)
         (setq word
               (if (use-region-p)
                   (buffer-substring-no-properties (region-beginning) (region-end))
                 (current-word)))
         (setq word (replace-regexp-in-string " " "_" word))
         (browse-url (concat "http://en.wikipedia.org/wiki/" word))))
   #+end_src

** lookup Wiktionary
   #+begin_src emacs-lisp
     (autoload 'ispell-get-word "ispell")

     (defun my-lookup-wiktionary (word)
       (interactive (list (save-excursion (car (ispell-get-word nil)))))
       (browse-url (format "http://en.wiktionary.org/wiki/%s" word)))

     (global-set-key (kbd "M-#") 'my-lookup-wiktionary)
   #+end_src

* Media
** epub
   #+begin_src emacs-lisp
     (use-package nov
       :ensure nil
       :mode ("\\.epub\\'" . nov-mode))
   #+end_src

** pdf
   #+begin_src emacs-lisp
     (use-package pdf-tools
       :ensure nil
       :mode ("\\.pdf\\'" . pdf-view-mode)
       :config
       (pdf-loader-install))
   #+end_src

* Developer Tools
** debbugs
   #+begin_src emacs-lisp
     (use-package debbugs
       :ensure nil
       :commands (debbugs-gnu
                  debbugs-org
                  debbugs-gnu-bugs
                  debbugs-org-bugs
                  debbugs-gnu-search
                  debbugs-org-search)
       :config
       (setq debbugs-gnu-default-packages '("guix")))
   #+end_src

* Chinese compatibility hack
** Chinese Font
   To align Chinese characters with English characters vertically, the Chinese
   font should be rescaled.
   #+begin_example
     chinese_font_size = 1.2 * english_font_zise
     chinese_character_width = 2 * english_character_width
   #+end_example

   #+begin_src emacs-lisp
     (defun my-set-chinese-font (font-list &optional font-size)
       "Set Chinese font to the first available font in FONT-LIST."
       (let ((chinese-font (cl-find-if #'my-font-available-p font-list)))

         (if (null chinese-font)
             (user-error "No font is available in FONT-LIST"))

         (message "Set Chinese font to %s" chinese-font)
         (dolist (charset '(han cjk-misc))
           (set-fontset-font t charset
                             (font-spec :family chinese-font :size font-size)))

         ;; Rescale Chinese fonts
         (setq face-font-rescale-alist
               '((".*WenQuanYi.*" . 1.2)
                 (".*Heiti.*" . 1.2)
                 (".*Yahei.*" . 1.2)))
         ))
   #+end_src

   My preferred fonts
   #+begin_src emacs-lisp
     (when (display-graphic-p)
       (my-set-chinese-font
        '("WenQuanYi Micro Hei" "WenQuanYi Zen Hei" "Microsoft Yahei")))
   #+end_src

** Fix line break in Chinese paragraph
   by zwz.github.io
   #+begin_src emacs-lisp
     (defun clear-single-linebreak-in-cjk-string (string)
       "clear single line-break between cjk characters that is usually soft
     line-breaks"
       (let* ((cjk-char "[\u3000-\u303F]\\|[\u4E00-\u9FFF]\\|[\uFF01-\uFF5E]")
              (regexp (concat "\\(" cjk-char "\\)\n\\(" cjk-char "\\)"))
              (start (string-match regexp string)))
         (while start
           (setq string (replace-match "\\1\\2" nil nil string)
                 start (string-match regexp string start))))
       string)

     (defun ox-html-clear-single-linebreak-for-cjk (string backend info)
       (when (org-export-derived-backend-p backend 'html)
         (clear-single-linebreak-in-cjk-string string)))

     (eval-after-load "ox"
       '(add-to-list 'org-export-filter-final-output-functions
                     'ox-html-clear-single-linebreak-for-cjk))
   #+end_src

* local.init.el
  Load an optional local init file
  #+begin_src emacs-lisp
    (load (expand-file-name "local.init.el" user-emacs-directory) 'noerror)
  #+end_src
